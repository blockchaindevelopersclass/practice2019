openapi: "3.0.0"

info:
  version: "0.1"
  title: Scorex Node API example
  description: API docs for example Scorex project.
  contact:
    name: Scorex framework Team
    email: kushi@protonmail.com
    url: https://github.com/scorexfoundation/scorex
  license:
    name: CC0 1.0 Universal
    url: https://raw.githubusercontent.com/ScorexFoundation/Scorex/master/COPYING

components:
  schemas:
    # Objects
    PaymentRequest:
      description: Request for generation of payment transaction to a given address
      type: object
      required:
        - address
        - value
      properties:
        recipient:
          description: Payment address
          type: string
          example: "01456a08bda264b3e6d4211f2bbb0478c4049b796afb759daace23c4247f72ea71b377262d"
        amount:
          description: Payment amount
          type: integer
          format: int64
          example: 1
    ModifierId:
      description: Base16-encoded 32 byte modifier id
      type: string
      format: base16
      example: 3ab9da11fc216660e974842cc3b7705e62ebb9e0bf5ff78e53f9cd40abadd117

    Digest32:
      description: Base16-encoded 32 byte digest
      type: string
      format: base16
      example: e15a5bb0a1ad2f341a50c4f3fdcb01a516f39069baf66977e7e026a69e9a080d

    Peer:
      type: object
      required:
        - address
      properties:
        address:
          type: string
          example: 127.0.0.1:5673
        name:
          type: string
          example: mynode
        nonce:
          type: integer
          # int32
          format: int64
          example: 123456
        lastSeen:
          type: integer
          # int32
          format: int64
          example: 123456
    BlacklistedPeers:
      type: object
      required:
        - addresses
      properties:
        addresses:
          type: array
          items:
            type: string
            example: 127.0.0.1:27272
    ApiError:
      type: object
      required:
        - error
        - reason
        - detail
      properties:
        error:
          type: int32
          description: Error code
          example: 500
        reason:
          type: string
          description: String error code
          example: 'Internal server error'
        detail:
          type: string
          nullable: true
          description: Detailed error description


paths:
  /bd/contains/{modifierId}:
    get:
      summary: Get modifier by id
      operationId: getPersistentModifierById
      tags:
        - bd
      parameters:
        - in: path
          name: modifierId
          required: true
          description: ID of a requested modifier
          schema:
            $ref: '#/components/schemas/ModifierId'
      responses:
        200:
          description: Presence of block in blockchain
          content:
            application/json:
              schema:
                type: object
                required:
                  - id
                  - contains
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /bd/info:
    get:
      summary: Get node info
      operationId: getNodeInfo
      tags:
        - bd
      responses:
        200:
          description: General information about node
          content:
            application/json:
              schema:
                type: object
                required:
                  - bestBlock
                  - height
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /bd/transfer:
    post:
      summary: Transfer coins
      operationId: transfer
      tags:
        - bd
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentRequest'
      responses:
        200:
          description: Attempt to connect to the peer
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'


  /peers/all:
    get:
      summary: Get all known peers
      operationId: getAllPeers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connected:
    get:
      summary: Get current connected peers
      operationId: getConnectedPeers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Peer'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/connect:
    post:
      summary: Add address to peers list
      operationId: connectToPeer
      tags:
        - peers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              example: 127.0.0.1:5673
      responses:
        200:
          description: Attempt to connect to the peer
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /peers/blacklisted:
    get:
      summary: Get blacklisted peers
      operationId: getBlacklistedPeers
      tags:
        - peers
      responses:
        200:
          description: Array of peer objects
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlacklistedPeers'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/seed:
    get:
      summary: Get random seed with 32 bytes size
      operationId: getRandomSeed
      tags:
        - utils
      responses:
        200:
          description: Base15-encoded 32 byte seed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Digest32'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/seed/{length}:
    get:
      summary: Generate random seed of specified length in bytes
      operationId: getRandomSeedWithLength
      tags:
        - utils
      parameters:
        - in: path
          name: length
          required: true
          description: seed length in bytes
          schema:
            type: string
      responses:
        200:
          description: Base16-encoded N byte seed
          content:
            application/json:
              schema:
                type: string
                format: base16
                example: 4e4ddea9ac11c7f55cf98c7af28166e9e7ecfac9ca1079ca7d04c3d66251a7d8
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'

  /utils/hash/blake2b:
    post:
      summary: Return Blake2b hash of specified message
      operationId: hashBlake2b
      tags:
        - utils
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: string
              format: base16
              example: 27cda3fa0526ffcfff754baa7886c30a05a21c9b01e4b91b5627a5c578f0bd16
      responses:
        200:
          description: Base16-encoded 32 byte hash
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Digest32'
        default:
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
